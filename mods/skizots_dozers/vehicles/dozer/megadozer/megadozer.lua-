require "/scripts/vec2.lua"

function init()
  self.specialLast = false
  self.active = false
  self.fireTimer = 0
  animator.rotateGroup("guns", 0, true)
  self.level = vehicle.configParameter("mechLevel", 6)
  self.groundFrames = 1

  self.maxHealth = vehicle.configParameter("maxHealth",100)
  storage.health = self.maxHealth
    
  --this comes in from the controller.
  self.ownerKey = vehicle.configParameter("ownerKey")
  vehicle.setPersistent(self.ownerKey)

   --setup the store functionality  
  message.setHandler("store",
                      function(_, _, ownerKey)

                        if (self.ownerKey and self.ownerKey == ownerKey and self.driver == nil and animator.animationState("movement")=="idle") then
--                          animator.setAnimationState("movement", "warpOutPart1")
                          vehicle.destroy()
                          return {storable = true, healthFactor = storage.health / self.maxHealth}
                        else
                          return {storable = false, healthFactor = storage.health / self.maxHealth}
                        end
                      end
                    )

end

function update()
  local mechAimLimit = vehicle.configParameter("mechAimLimit") * math.pi / 180
  local mechHorizontalMovement = vehicle.configParameter("mechHorizontalMovement")
  local mechJumpVelocity = vehicle.configParameter("mechJumpVelocity")
  local mechFireCycle = vehicle.configParameter("mechFireCycle")
  local mechProjectile = vehicle.configParameter("mechProjectile")
  local mechProjectileConfig = vehicle.configParameter("mechProjectileConfig")
  local offGroundFrames = vehicle.configParameter("offGroundFrames")

  local mechCollisionPoly = mcontroller.collisionPoly()
  local position = mcontroller.position()

  if mechProjectileConfig.power then
    mechProjectileConfig.power = root.evalFunction("gunDamageLevelMultiplier", self.level) * mechProjectileConfig.power
  end

  local entityInSeat = vehicle.entityLoungingIn("seat")
  if not entityInSeat then
    vehicle.setDamageTeam({type = "passive"})
    animator.rotateGroup("guns", -mechAimLimit, true)
    animator.setAnimationState("movement", "idle")
    return
  end
  vehicle.setDamageTeam(world.entityDamageTeam(entityInSeat))

  local diff = world.distance(vehicle.aimPosition("seat"), mcontroller.position())
  local aimAngle = math.atan(diff[2], diff[1])
  local facingDirection = (aimAngle > math.pi / 2 or aimAngle < -math.pi / 2) and -1 or 1

  if facingDirection < 0 then
    animator.setFlipped(true)

    if aimAngle > 0 then
      aimAngle = math.max(aimAngle, math.pi - mechAimLimit)
    else
      aimAngle = math.min(aimAngle, -math.pi + mechAimLimit)
    end

    animator.rotateGroup("guns", math.pi - aimAngle)
  else
    animator.setFlipped(false)

    if aimAngle > 0 then
      aimAngle = math.min(aimAngle, mechAimLimit)
    else
      aimAngle = math.max(aimAngle, -mechAimLimit)
    end

    animator.rotateGroup("guns", aimAngle)
  end

  local onGround = mcontroller.onGround()
  local movingDirection = 0

  if vehicle.controlHeld("seat", "left") and onGround then
    mcontroller.setXVelocity(-mechHorizontalMovement)
    movingDirection = -1
  end

  if vehicle.controlHeld("seat", "right") and onGround then
    mcontroller.setXVelocity(mechHorizontalMovement)
    movingDirection = 1
  end

  if vehicle.controlHeld("seat", "jump") and onGround then
    mcontroller.setXVelocity(mechJumpVelocity[1] * movingDirection)
    mcontroller.setYVelocity(mechJumpVelocity[2])
    animator.setAnimationState("movement", "jump")
    self.groundFrames = 0
  end

  if onGround then
    self.groundFrames = offGroundFrames
  else
    self.groundFrames = self.groundFrames - 1
  end

  if self.groundFrames <= 0 then
    if mcontroller.velocity()[2] > 0 then
      animator.setAnimationState("movement", "jump")
    else
      animator.setAnimationState("movement", "fall")
    end  
    vehicle.setLoungeDance("seat","panic")
  elseif movingDirection ~= 0 then
    if facingDirection ~= movingDirection then
      animator.setAnimationState("movement", "backWalk")
    else
      animator.setAnimationState("movement", "walk")
    end
    vehicle.setLoungeDance("seat","typing")
    vehicle.setLoungeEmote("seat","laugh")
  elseif onGround then
    animator.setAnimationState("movement", "idle")
    vehicle.setLoungeDance("seat","flipswitch")
    vehicle.setLoungeEmote("seat","annoyed")
  end

  if vehicle.controlHeld("seat", "primaryFire") then
-- dig it
  end
end
