{
	"effectParameters" : {

		"lightMapEnabled" : {
			"type" : "bool",
			"default" : false,
			"uniform" : "lightMapEnabled"
		},

		"lightMapScale" : {
			"type" : "vec2",
			"default" : [1, 1],
			"uniform" : "lightMapScale"
		},

		"lightMapOffset" : {
			"type" : "vec2",
			"default" : [0, 0],
			"uniform" : "lightMapOffset"
		},

		"lightMapMultiplier" : {
			"type" : "float",
			"default" : 1.0,
			"uniform" : "lightMapMultiplier"
		}
	},

	"effectTextures" : {
		"lightMap" : {
			"textureUniform" : "lightMap",
			"textureSizeUniform" : "lightMapSize",
			"textureAddressing" : "clamp",
			"textureFiltering" : "linear"
		}
	},

	"vertexShader" : "
		#version 110

		uniform vec2 textureSize0;
		uniform vec2 textureSize1;
		uniform vec2 textureSize2;
		uniform vec2 textureSize3;
		uniform vec2 screenSize;
		uniform mat3 vertexTransform;
		uniform vec2 lightMapSize;
		uniform vec2 lightMapScale;
		uniform vec2 lightMapOffset;

		attribute vec2 vertexPosition;
		attribute vec2 vertexTextureCoordinate;
		attribute float vertexTextureIndex;
		attribute vec4 vertexColor;
		attribute float vertexParam1;

		varying vec2 fragmentTextureCoordinate;
		varying float fragmentTextureIndex;
		varying vec4 fragmentColor;
		varying float fragmentLightMapMultiplier;
		varying vec2 fragmentLightMapCoordinate;

		void main()
		{
			vec2 screenPosition = (vertexTransform * vec3(vertexPosition, 1.0)).xy;

			fragmentLightMapMultiplier = vertexParam1;
			fragmentLightMapCoordinate = (screenPosition / lightMapScale) - lightMapOffset * lightMapSize / screenSize;

			if (vertexTextureIndex > 2.9)
			{
				fragmentTextureCoordinate = vertexTextureCoordinate / textureSize3;
			}
			else if (vertexTextureIndex > 1.9)
			{
				fragmentTextureCoordinate = vertexTextureCoordinate / textureSize2;
			}
			else if (vertexTextureIndex > 0.9)
			{
				fragmentTextureCoordinate = vertexTextureCoordinate / textureSize1;
			}
			else
			{
				fragmentTextureCoordinate = vertexTextureCoordinate / textureSize0;
			}

			vec4 position = vec4(screenPosition / screenSize * 2.0 - 1.0, 0.0, 1.0);

			/*
			if ((vertexColor.x + vertexColor.y + vertexColor.z) < 3.0)
			{
				position.x += position.x / 80.0;
				position.y += position.y / 40.0;
			}
			*/

			fragmentTextureIndex = vertexTextureIndex;
			fragmentColor = vertexColor;

			gl_Position = position;
		}
	",

	"fragmentShader" : "
		#version 110

		uniform sampler2D texture0;
		uniform sampler2D texture1;
		uniform sampler2D texture2;
		uniform sampler2D texture3;
		uniform bool lightMapEnabled;
		uniform vec2 lightMapSize;
		uniform sampler2D lightMap;
		uniform float lightMapMultiplier;

		varying vec2 fragmentTextureCoordinate;
		varying float fragmentTextureIndex;
		varying vec4 fragmentColor;
		varying float fragmentLightMapMultiplier;
		varying vec2 fragmentLightMapCoordinate;

		vec4 cubic(float v)
		{
			vec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;
			vec4 s = n * n * n;
			float x = s.x;
			float y = s.y - 4.0 * s.x;
			float z = s.z - 4.0 * s.y + 6.0 * s.x;
			float w = 6.0 - x - y - z;
			return vec4(x, y, z, w);
		}

		vec4 bicubicSample(sampler2D texture, vec2 texcoord, vec2 texscale)
		{
			texcoord = texcoord - vec2(0.5, 0.5);

			float fx = fract(texcoord.x);
			float fy = fract(texcoord.y);
			texcoord.x -= fx;
			texcoord.y -= fy;

			vec4 xcubic = cubic(fx);
			vec4 ycubic = cubic(fy);

			vec4 c = vec4(texcoord.x - 0.5, texcoord.x + 1.5, texcoord.y - 0.5, texcoord.y + 1.5);
			vec4 s = vec4(xcubic.x + xcubic.y, xcubic.z + xcubic.w, ycubic.x + ycubic.y, ycubic.z + ycubic.w);
			vec4 offset = c + vec4(xcubic.y, xcubic.w, ycubic.y, ycubic.w) / s;

			vec4 sample0 = texture2D(texture, vec2(offset.x, offset.z) * texscale);
			vec4 sample1 = texture2D(texture, vec2(offset.y, offset.z) * texscale);
			vec4 sample2 = texture2D(texture, vec2(offset.x, offset.w) * texscale);
			vec4 sample3 = texture2D(texture, vec2(offset.y, offset.w) * texscale);

			float sx = s.x / (s.x + s.y);
			float sy = s.z / (s.z + s.w);

			return mix
			(
				mix(sample3, sample2, sx),
				mix(sample1, sample0, sx), 
				sy
			);
		}

		vec3 rgb2hsv(vec3 c)
		{
			vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
			vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
			vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

			float d = q.x - min(q.w, q.y);
			float e = 1.0e-10;
			return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
		}

		vec3 hsv2rgb(vec3 c)
		{
			vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
			vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
			return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
		}

		// texColor - Predictably, the texture color. This also includes block shadows
		//            as well as clouds and other parallax-- but not the sky.
		// fragmentColor - Liquids, terrain shadow, parallax shadow, clouds, sun, UI.

		void main()
		{
			vec4 texColor;

			if (fragmentTextureIndex > 2.9)
			{
				texColor = texture2D(texture3, fragmentTextureCoordinate);
			}
			else if (fragmentTextureIndex > 1.9)
			{
				texColor = texture2D(texture2, fragmentTextureCoordinate);
			}
			else if (fragmentTextureIndex > 0.9)
			{
				texColor = texture2D(texture1, fragmentTextureCoordinate);
			}
			else
			{
				texColor = texture2D(texture0, fragmentTextureCoordinate);
			}

			if (texColor.a <= 0.0)
				discard;

			float finalLightMapMultiplier = fragmentLightMapMultiplier * lightMapMultiplier;

			vec4 shadowColor = fragmentColor;
			vec4 finalColor  = texColor;

			int alpha = int(floor(clamp(texColor.a, 0.0, 1.0) * 255.0));
			bool isFullBright = alpha == 254;

			//	Alpha Encoding (8 bits):
			//	0 			0 			000			000
			//	IsEncoded	Emissive	Specular	Normal

			if (isFullBright)
			{
				finalColor.a = 1.0;
			}
			else if (lightMapEnabled && (finalLightMapMultiplier > 0.0))
			{
				vec3 light    = bicubicSample(lightMap, fragmentLightMapCoordinate, 1.0 / lightMapSize).rgb;
				vec3 ambient  = light * 0.2;
				vec3 diffuse  = min(pow(light, vec3(2.2)) * 1.8, vec3(1.4));
				vec3 specular = diffuse * pow(max(max(texColor.x, texColor.y), texColor.z), 8.0) * 0.1;
				vec3 result   = ambient + diffuse + specular;

				shadowColor.xyz = rgb2hsv(light);
				shadowColor.y *= 0.35;
				shadowColor.z = mix(shadowColor.z, fragmentColor.x, 0.8);
				shadowColor.xyz = hsv2rgb(shadowColor.xyz);

				finalColor.rgb *= result * finalLightMapMultiplier;

				// Liquids
				/*
				if ((fragmentColor.x != fragmentColor.y) && (fragmentColor.x != fragmentColor.z))
				{
					//finalColor = vec4(1.0, 0.0, 0.0, 0.25);
				}
				*/
			}

			gl_FragColor = finalColor * shadowColor;
		}
	"
}